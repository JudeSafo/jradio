package ru.r2cloud.jradio.blocks;

import static org.junit.Assert.assertArrayEquals;

import org.junit.Test;

public class FirdesTest {

	@Test
	public void testGaussian() {
		float[] actual = Firdes.gaussian(1.5, 2 * (48000 / 9600), 0.5, 12);
		float[] expected = new float[] { 0.039070457f, 0.07415177f, 0.12205514f, 0.17424175f, 0.21572968f, 0.23164831f, 0.21572968f, 0.17424175f, 0.12205514f, 0.07415177f, 0.039070457f, 0.017854061f };
		assertArrayEquals(expected, actual, 0.0f);
	}

	@Test
	public void testLowPass() {
		assertArrayEquals(new float[] { 0.001008346f, -6.822763E-4f, -8.1304566E-4f, 0.0016567904f, -3.310066E-18f, -0.002787134f, 0.0022303094f, 0.002859019f, -0.0058610104f, 8.506423E-18f, 0.009095494f, -0.0069024456f, -0.008413093f, 0.016501362f, -1.5403145E-17f, -0.02406701f, 0.01799467f,
				0.021901557f, -0.04362453f, 2.1149863E-17f, 0.07096524f, -0.060137074f, -0.09201361f, 0.3013133f, 0.59955025f, 0.3013133f, -0.09201361f, -0.060137074f, 0.07096524f, 2.1149863E-17f, -0.04362453f, 0.021901557f, 0.01799467f, -0.02406701f, -1.5403145E-17f, 0.016501362f, -0.008413093f,
				-0.0069024456f, 0.009095494f, 8.506423E-18f, -0.0058610104f, 0.002859019f, 0.0022303094f, -0.002787134f, -3.310066E-18f, 0.0016567904f, -8.1304566E-4f, -6.822763E-4f, 0.001008346f }, Firdes.lowPass(1.0, 20.0, 6.0, 1.0, Window.WIN_HAMMING, 6.76), 0.0f);
	}

	@Test
	public void testFromGnuRadio() {
		assertArrayEquals(new float[] { 0.00111410965f, -0.000583702058f, -0.00192639488f, 2.30933896e-18f, 0.00368289859f, 0.00198723329f, -0.0058701504f, -0.00666110823f, 0.0068643163f, 0.0147596458f, -0.00398709066f, -0.0259727165f, -0.0064281947f, 0.0387893915f, 0.0301109217f, -0.0507995859f,
				-0.0833103433f, 0.0593735874f, 0.310160041f, 0.437394291f, 0.310160041f, 0.0593735874f, -0.0833103433f, -0.0507995859f, 0.0301109217f, 0.0387893915f, -0.0064281947f, -0.0259727165f, -0.00398709066f, 0.0147596458f, 0.0068643163f, -0.00666110823f, -0.0058701504f, 0.00198723329f,
				0.00368289859f, 2.30933896e-18f, -0.00192639488f, -0.000583702058f, 0.00111410965f }, Firdes.lowPass(1.0, 8000, 1750, 500, Window.WIN_HAMMING, 6.76), 0.0f);
	}

	@Test
	public void testRootRaisedCosine() {
		assertArrayEquals(new float[] { 0.009424058720469475f, -0.0010619648965075612f, -0.054543860256671906f, 0.022260747849941254f, 0.29345303773880005f, 0.4609359800815582f, 0.29345303773880005f, 0.022260747849941254f, -0.054543860256671906f, -0.0010619648965075612f, 0.009424058720469475f },
				Firdes.rootRaisedCosine(1.0f, 10.0f, 4.0f, 0.6f, 11), 0.0000001f);
	}

	@Test
	public void testRrcFromGnuRadio() {
		assertArrayEquals(new float[] { -0.04609205573797226f, -0.02069387212395668f, 0.050548505038022995f, 0.14850808680057526f, 0.23387153446674347f, 0.2677156329154968f, 0.23387153446674347f, 0.14850808680057526f, 0.050548505038022995f, -0.02069387212395668f, -0.04609205573797226f },
				Firdes.rootRaisedCosine(1.0f, 4.0f, 1.0f, 0.35f, 11), 0.0000001f);
	}

	@Test
	public void testExtendedRaisedCosine() {
		float sampleRate = 800.0f;
		float baudRate = 45.45f;
		float[] result = Firdes.extendedRaisedCosine(1.0, sampleRate, baudRate, 0.35, (int) (sampleRate / baudRate) * 11, 2);
		assertArrayEquals(new float[] { 0.000004774765f, -0.000003888806f, -0.000014683593f, -0.000025743097f, -0.000034874240f, -0.000040011782f, -0.000039682236f, -0.000033373202f, -0.000021717880f, -0.000006440063f, 0.000009944774f, 0.000024621777f, 0.000035064644f, 0.000039592815f,
				0.000037769722f, 0.000030540908f, 0.000020062816f, 0.000009240194f, 0.000001057981f, -0.000002152416f, 0.000000653492f, 0.000008856906f, 0.000020167112f, 0.000031016698f, 0.000037306931f, 0.000035364657f, 0.000022910521f, -0.000000183491f, -0.000031543153f, -0.000066471104f,
				-0.000098672404f, -0.000121422032f, -0.000128960950f, -0.000117834548f, -0.000087871689f, -0.000042551554f, 0.000011385019f, 0.000065070097f, 0.000109214561f, 0.000136065792f, 0.000141208409f, 0.000124789862f, 0.000091833135f, 0.000051462477f, 0.000015087844f, -0.000006171487f,
				-0.000004340273f, 0.000022889129f, 0.000070579408f, 0.000126413215f, 0.000172257278f, 0.000187357626f, 0.000152746332f, 0.000056124769f, -0.000103717539f, -0.000313939119f, -0.000546987809f, -0.000762775016f, -0.000913748227f, -0.000952386647f, -0.000840134860f, -0.000556383457f,
				-0.000105908548f, 0.000476764224f, 0.001127280062f, 0.001756303478f, 0.002259213012f, 0.002529773628f, 0.002476205816f, 0.002037554979f, 0.001198019832f, -0.000002977387f, -0.001466758084f, -0.003038423136f, -0.004517061636f, -0.005672282539f, -0.006265314762f, -0.006072315387f,
				-0.004907179624f, -0.002641231054f, 0.000782408111f, 0.005341262557f, 0.010933344252f, 0.017384056002f, 0.024458987638f, 0.031880848110f, 0.039348453283f, 0.046555735171f, 0.053209092468f, 0.059041798115f, 0.063824988902f, 0.067375242710f, 0.069559231400f, 0.070296235383f,
				0.069559231400f, 0.067375242710f, 0.063824988902f, 0.059041798115f, 0.053209092468f, 0.046555735171f, 0.039348453283f, 0.031880848110f, 0.024458987638f, 0.017384056002f, 0.010933344252f, 0.005341262557f, 0.000782408111f, -0.002641231054f, -0.004907179624f, -0.006072315387f,
				-0.006265314762f, -0.005672282539f, -0.004517061636f, -0.003038423136f, -0.001466758084f, -0.000002977387f, 0.001198019832f, 0.002037554979f, 0.002476205816f, 0.002529773628f, 0.002259213012f, 0.001756303478f, 0.001127280062f, 0.000476764224f, -0.000105908548f, -0.000556383457f,
				-0.000840134860f, -0.000952386647f, -0.000913748227f, -0.000762775016f, -0.000546987809f, -0.000313939119f, -0.000103717539f, 0.000056124769f, 0.000152746332f, 0.000187357626f, 0.000172257278f, 0.000126413215f, 0.000070579408f, 0.000022889129f, -0.000004340273f, -0.000006171487f,
				0.000015087844f, 0.000051462477f, 0.000091833135f, 0.000124789862f, 0.000141208409f, 0.000136065792f, 0.000109214561f, 0.000065070097f, 0.000011385019f, -0.000042551554f, -0.000087871689f, -0.000117834548f, -0.000128960950f, -0.000121422032f, -0.000098672404f, -0.000066471104f,
				-0.000031543153f, -0.000000183491f, 0.000022910521f, 0.000035364657f, 0.000037306931f, 0.000031016698f, 0.000020167112f, 0.000008856906f, 0.000000653492f, -0.000002152416f, 0.000001057981f, 0.000009240194f, 0.000020062816f, 0.000030540908f, 0.000037769722f, 0.000039592815f,
				0.000035064644f, 0.000024621777f, 0.000009944774f, -0.000006440063f, -0.000021717880f, -0.000033373202f, -0.000039682236f, -0.000040011782f, -0.000034874240f, -0.000025743097f, -0.000014683593f, -0.000003888806f, 0.000004774765f }, result, 0.0000001f);
	}

}
