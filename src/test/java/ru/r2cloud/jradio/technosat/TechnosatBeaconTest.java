package ru.r2cloud.jradio.technosat;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import ru.r2cloud.jradio.AssertJson;
import ru.r2cloud.jradio.fec.ViterbiTest;

public class TechnosatBeaconTest {

	@Test
	public void testPartialRecovery() throws Exception {
		String data
		TechnosatBeacon beacon = new TechnosatBeacon();
		beacon.readBeacon(ViterbiTest.hexStringToByteArray(data));
		AssertJson.assertObjectsEqual("TechnosatBeacon-partial.json", beacon);
	}

	@Test
	public void testFrameWithFiller() throws Exception {
		byte[] data = new byte[] { 63, 14, -59, 68, 112, 48, 116, 66, 78, 21, -64, -17, 39, -1, 23, 114, 8, 14, -42, -93, 75, -113, -45, -20, -78, 37, -60, -96, 94, 61, -56, -25, 90, -19, -71, -113, 117, -119, -2, -128, 126, 27, 83, 26, 56, -56, -96, -67, -70, -121, 120, -15, -113, -24, 77, 69, 117,
				-51, -25, 54, 44, 91, -105, -70, 101, -36, -39, 10, -57, 49, -119, -19, -113, 33, -95, -18, -127, -105, 56, 36, -127, 107, -118, -47, -65, -28, -15, 17, -67, -27, 43, -42, 25, 1, -104, 24, -49, 105, -93, 62, 106, 46, -103, 53, -65, -90, -124, -32, 19, 29, 124, 29, -59, 62, -2, 71,
				-34, -68, 0, -109, -72, 127, 122, -82, -35, -78, -26, -7, -67, 1, -30, -48, -72, -9, 8, -37, 116, -38, -126, 63, 8, 112, 93, -104, 57, 93, 14, 95, -58, 110, 32, 82, -79, -10, 68, 102, -103, -95, 60, -62, 9, 85, -80, -103, 98, -99, -109, 14, 78, 76, 95, -14, 46, 33, -66, -32, 79, -98,
				21, -41, 37, -8, 126, -14, 56, -93, -92, 8, -29, 90, 26, -63, -89, 109, -2, -88, 20, -49, 125, -47, 109, -2, 103, 66, -103, -20, -99, 49, 56, 95, -104, -101, -20, -8, -117, 49, 32, 86, -24, -99, 24, -128, -44, -31, 55, -32, 97, 80, -31, 47, 99, 91, -2, -90, -123, 42, -123, 53, 80,
				-25, 116, 33, -95, -56, 107, -40, -29, -82, 113, 45, 103, -79, 53, 68, -91, 124, -42, 86, 31, -57, -3, 23, -56, -122, 94, 16, 29, 61, -27, -49, -90, -117, -47, 21, -110, -86, -63, 68, -33, -39, 11, -63, 121, 10, -56, 85, 98, 79, -41, 54, -78, -92, 109, -12, 50, 126, 84, 96, -110,
				-121, -32, -114, 126, -23, 14, 56, -77, -121, -56, 14, 57, 13, -103, 88, 124, 121, 125, -24, -48, -126, 101, -3, 71, 5, -22, -23, 0, 56, 59, -120, -25, -94, 22, -24, 119, -39, -35, 71, -92, -89, 67, 86, 18, -38, 120, -71, -124, 86, 3, -56, -21, -76, -116, -71, -40, -128, 57, -64,
				106, -62, -11, 78, -46, 51, 16, 62, 24, -15, -78, -1, -61, 51, 87, 65, -81, -100, -128, -113, -82, -109, 107, -73, -114, 15, -94, 94, -50, -126, -65, -30, -23, 56, 0, -44, -69, -47, 39, -63, -31, -54, 16, -66, 98, 48, 97, 28, 9, -84, -21, 52, -119, 112, -73, -128, -42, -34, 27, -116,
				-72, -116, 57, -3, -41, 14, -127, -96, -56, 23, -9, 96, 120, 1, -56, 24, 76, 124, -105, 122, -68, -29, -105, -84, 44, -12, -120, 82, 7, 127, -78, -79, -119, 106, 119, -67, -12, -10, 70, -87, -95, -20, -42, -111, 38, 111, 88, -107, 100, 27, 36, -73, 52, 125, 21, -111, -33, -57, 27,
				-47, 31, -68, 58, 116, -14, -39, 120, 13, 27, -47, -68, 86, -5, -114, 35, 56, -15, -78, -21, 106, -79, 111, -66, 36, 16, -52, -112, 93, -52, -95, 46, -67, 122, 22, 71, 54, 75, -14, 125, -58, -53, -73, 79, 112, -9, -93, -25, -106, -75, 1, 78, 121, 101, -38, -114, -112, -10, 20, 22,
				-112, -12, 10, -107, 78, -43, -89, 106, -101, 66, -51, 26, 23, 93, 95, -109, 115, -96, 108, -62, -69, -50, 89, -123, -39, -7, -90, -78, 113, 117, -36, 84, 47, 30, -101, -58, 102, -55, 0, -35, -37, -53, -99, -60, -123, -19, -6, 29, -31, -1, 7, -86, -30, -21, 33, -86, -92, -88, -71,
				33, 17, -54, 40, 39, -51, -59, 18, 60, -97, -32, -64, 45, -111, 22, -85, 27, -63, 85, -85, -119, -10, 113, 117, -45, -25, 122, 47, -14, -76, 91, -113, 21, 30, -33, 49, -102, -93, -108, 4, -114, -5, -104, -118, -11, -96, -47, 60, 98, 8, -34, 48, 75, -125, -83, 15, 44, 92, -35, 33,
				107, 71, -101, 99, 127, 86, 74, 39, 83, 67, 4, -48, 81, 108, 16, 79, -109, 82, 40, 26, -49, -93, -101, 42, 103, 73, -111, -74, 40, -36, -5, -39, -120, 48, -9, 110, -20, 53, -73, 68, -75, -27, 69, 41, 66, 124, 97, 111, 83, -14, 45, 55, 14, 111, -51, 109, -70, -53, -84, 68, -107, -102,
				66, 126, 64, 106, 81, 82, -54, -1, -3, -63, 72, 126, 115, -98, -58, 75, -20, 116, 16, -30, 97, 109, 119, 112, -110, 119, 114, -15, -68, -61, 75, 101, 70, 8, -66, -13, -36, -33, -60, 108, 124, 9, -48, -64, -42, 125, 89, 112, 127, 16, -108, 56, 27, 95, -64, -72, -127, 19, 17, -54, 119,
				-39, 100, 89, 84, -82, 72, 48, 86, 29, 54, -14, 90, 90, 46, 124, -60, 71, 40, -125, 66, 105, -52, -8, -64, 124, 48, -103, 45, -72, 3, -33, -121, 110, 70, 47, -76, -51, 95, -46, 88, 95, 64, -36, -61, -111, -42, 85, 56, -101, 99, 116, -127, -19, 85, -3, -19, -114, -98, 40, 19, -126,
				119, 25, 70, -14, 5, -64, 69, 53, 109, -47, 126, -48, 42, 119, 77, 60, -7, 80, 66, -106, -114, -71, 104, -118, 14, 54, -117, -60, -104, 63, -7, 49, 48, 0, 12, 58, -105, -57, -70, 95, 105, 6, 84, -107, -65, 81, 20, -24, 109, 84, 124, 109, 21, 30, -7, -25, -128, -79, -66, -8, 50, 63,
				30, 7, -106, -27, -94, 91, -75, -78, -64, -48, -46, 107, 109, 6, 45, 55, -9, -61, 80, 51, -114, 102, -57, 114, 6, -71, 2, 60, 78, 100, -11, 111, -61, 8, -79, 72, 91, -64, -64, -112, 31, -14, 41, -25, 28, 17, 68, -28, -120, 116, -96, -78, -3, 105, 90, 35, -43, -117, 96, -59, 118, -29,
				30, -122, -103, 120, -81, -128, 61, -16, 126, 109, -119, -77, -90, -22, 78, 121, 8, -23, -80, 110, 0, -12, 79, -94, 52, 111, 109, -23, -103, 99, -25, -76, -117, 4, 41, -1, 46, 111, -63, 52, 110, 117, -100, -50, 103, -63, 2, -7, -7, -69, -109, -59, 120, 100, -114, 57, -41, 104, 13,
				-74 };
		TechnosatBeacon beacon = new TechnosatBeacon();
		beacon.readBeacon(data);
		assertEquals(14, beacon.getFrame().getPackets().size());
	}

}
