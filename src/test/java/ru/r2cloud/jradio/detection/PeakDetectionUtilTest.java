package ru.r2cloud.jradio.detection;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

public class PeakDetectionUtilTest {

	@Test
	public void testSuccess() {
		float[] data = new float[] { -97.61100006103516f, -97.61100006103516f, -103.37547302246094f, -94.65328979492188f, -113.54466247558594f, -106.14624786376953f, -102.0497055053711f, -95.27454376220703f, -102.93424987792969f, -96.48270416259766f, -96.237548828125f, -91.92073059082031f, -95.25083923339844f, -101.84294891357422f, -97.7510757446289f, -100.71932220458984f, -97.25066375732422f, -101.7044448852539f, -106.20356750488281f, -100.20586395263672f, -100.80615234375f,
				-101.46022033691406f, -103.07856750488281f, -110.3556900024414f, -95.45500183105469f, -107.99188995361328f, -107.5321273803711f, -99.22444152832031f, -101.6639175415039f, -115.8729019165039f, -99.26569366455078f, -98.88955688476562f, -101.33503723144531f, -97.10340881347656f, -104.71305084228516f, -115.97047424316406f, -108.77914428710938f, -102.04167938232422f, -103.23015594482422f, -98.76508331298828f, -100.6291732788086f, -98.6710205078125f, -109.4253921508789f,
				-103.71735382080078f, -101.10243225097656f, -102.92610168457031f, -102.9165267944336f, -99.62996673583984f, -102.52669525146484f, -102.10626220703125f, -101.95088195800781f, -100.20500183105469f, -100.96028137207031f, -100.95191192626953f, -100.23368072509766f, -100.25008392333984f, -99.66361999511719f, -99.49748229980469f, -97.28176879882812f, -105.9828872680664f, -92.47002410888672f, -88.61640930175781f, -85.65625f, -82.8424301147461f, -88.01697540283203f, -93.35189819335938f,
				-88.70683288574219f, -83.0334701538086f, -81.34117126464844f, -78.35834503173828f, -72.55525207519531f, -79.59701538085938f, -76.7910385131836f, -84.43709564208984f, -77.42765045166016f, -73.47132873535156f, -81.92179107666016f, -79.67328643798828f, -76.57920837402344f, -73.37882995605469f, -93.21670532226562f, -76.26885986328125f, -85.9123306274414f, -74.52084350585938f, -69.61991882324219f, -78.32288360595703f, -81.82907104492188f, -72.12400817871094f, -78.42753601074219f,
				-78.50395202636719f, -82.98812103271484f, -73.04519653320312f, -72.73281860351562f, -74.56544494628906f, -77.76091766357422f, -82.63507843017578f, -92.42576599121094f, -75.71129608154297f, -70.47171783447266f, -72.42649841308594f, -68.968994140625f, -72.62208557128906f, -75.61592102050781f, -70.47313690185547f, -71.50398254394531f, -72.11994171142578f, -74.17715454101562f, -78.74470520019531f, -82.0540542602539f, -79.83688354492188f, -73.23927307128906f, -75.07505798339844f,
				-77.94361877441406f, -78.40757751464844f, -77.48505401611328f, -75.50564575195312f, -78.73229217529297f, -74.91094207763672f, -87.82026672363281f, -74.36673736572266f, -76.54547882080078f, -80.22019958496094f, -84.92053985595703f, -79.65294647216797f, -70.8647689819336f, -82.39423370361328f, -75.24952697753906f, -93.78924560546875f, -91.90441131591797f, -71.47449493408203f, -70.98763275146484f, -74.33570098876953f, -72.36659240722656f, -73.30342102050781f, -79.05322265625f,
				-79.60387420654297f, -90.24209594726562f, -81.3107681274414f, -79.71619415283203f, -75.1844482421875f, -85.95809936523438f, -78.17609405517578f, -76.25424194335938f, -72.50678253173828f, -75.65180206298828f, -71.78887939453125f, -77.40362548828125f, -74.9461441040039f, -77.69674682617188f, -72.1742935180664f, -71.58842468261719f, -79.32342529296875f, -69.880126953125f, -74.04820251464844f, -79.76009368896484f, -67.9826431274414f, -90.15985107421875f, -71.22053527832031f,
				-71.27555847167969f, -76.17186737060547f, -81.34152221679688f, -74.95640563964844f, -69.21326446533203f, -75.0932846069336f, -77.35140991210938f, -80.03136444091797f, -75.55072784423828f, -68.6380386352539f, -73.23283386230469f, -79.98983764648438f, -81.72364807128906f, -79.18611145019531f, -75.4384536743164f, -76.0625228881836f, -74.36498260498047f, -81.82463073730469f, -69.26282501220703f, -77.9635238647461f, -86.47697448730469f, -76.80891418457031f, -78.21672821044922f,
				-84.72329711914062f, -76.4735336303711f, -76.6222915649414f, -81.17267608642578f, -78.98542022705078f, -79.5566177368164f, -77.81571197509766f, -93.86945343017578f, -92.73077392578125f, -83.05323791503906f, -97.38549041748047f, -83.71355438232422f, -88.3155288696289f, -100.70797729492188f, -100.53387451171875f, -110.90129089355469f, -107.47496795654297f, -103.6676254272461f, -109.97942352294922f, -103.4677734375f, -105.02437591552734f, -104.94409942626953f, -103.97883605957031f,
				-104.98421478271484f, -113.32606506347656f, -107.18162536621094f, -107.02684783935547f, -105.0774154663086f, -107.75690460205078f, -102.76651763916016f, -108.00364685058594f, -104.73653411865234f, -112.85282897949219f, -108.24933624267578f, -113.43836212158203f, -102.20061492919922f, -101.75386047363281f, -102.49449157714844f, -101.17539978027344f, -106.98151397705078f, -101.17487335205078f, -104.66341400146484f, -101.77520751953125f, -100.50849914550781f, -117.28141784667969f,
				-109.62541961669922f, -107.96562194824219f, -122.54288482666016f, -101.34405517578125f, -109.54119873046875f, -103.8372573852539f };

		int[] expected = new int[] { 155, 167, 100, 162, 176, 84, 152, 98, 103, 124, 130, 157, 150, 145, 87, 132, 143, 70, 92, 110, 79, 75, 174, 119, 117, 147, 139, 126, 172, 115, 81, 182, 72, 179, 187, 185, 63, 190, 192, 11, 3, 7, 24, 33, 16, 58, 0, 14, 41, 39, 31, 27, 47, 51, 19, 54, 224, 195, 44, 221, 219, 229, 217, 37, 210, 200, 198, 231, 203, 212, 208, 227, 214 };

		List<Peak> result = PeakDetectionUtil.getPersistentHomology(data);
		assertEquals(expected.length, result.size());
		for (int i = 0; i < expected.length; i++) {
			assertEquals(expected[i], result.get(i).getIndex());
		}
	}

}
